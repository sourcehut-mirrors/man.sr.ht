#!/usr/bin/env python3
#
# Usage:
#
# ./git-export <admin user> <root wiki name> <path to man repos> >export.json
#
# This script should be run on the git.sr.ht box after syncing the repos to it,
# as the git user. Then run this script on the man.sr.ht box, as the man user:
#
# ./git-import <import.json

import json
import os
import pygit2
import subprocess
import sys
import re
from gitsrht.git import Repository as GitRepository, commit_time
from gitsrht.repos import GitRepoApi
from gitsrht.types import Repository, User
from srht.config import cfg
from srht.database import DbSession
from srht.flask import DATE_FORMAT
from srht.validation import Validation

admin = sys.argv[1]
root_wiki = sys.argv[2]
man_repos = sys.argv[3]
git_repos = cfg("git.sr.ht", "repos")

name_re = re.compile(r"[^A-Za-z0-9._-]")

db = DbSession(cfg("git.sr.ht", "connection-string"))
db.init()
repo_api = GitRepoApi()

def migrate_repo(path, username, repo_name, is_root=False):
    print(f"Importing ~{username}/{repo_name}", file=sys.stderr)
    with GitRepository(path) as repo:
        user = User.query.filter(User.username == username).one_or_none()
        if not user:
            print("Skipping - unknown user", file=sys.stderr)
            return
        ref = "master"
        new = True
        git_repo = (Repository.query
                .filter(Repository.owner_id == user.id)
                .filter(Repository.name == repo_name)
            ).one_or_none()
        if git_repo:
            new = False
            try:
                with GitRepository(git_repo.path) as existing:
                    if not existing.is_empty:
                        ref = "wiki"
                        n = 1
                        while f"refs/heads/{ref}" in existing.references:
                            ref = f"wiki-{n}"
                            n += 1
            except:
                print("Skipping - couldn't load repo")
                return
        else:
            repo_name = name_re.sub("_", repo_name)
            repo_name = repo_name[0].lower() + repo_name[1:]
            valid = Validation({
                "name": repo_name,
                "description": "auto-created from man.sr.ht wiki",
                "visibility": "unlisted",
            })
            git_repo = repo_api.create_repo(valid, user)
            if not git_repo:
                print(f"Skipping - validation errors: {valid.response}",
                        file=sys.stderr)
                return
        if not repo.is_empty:
            proc = subprocess.run([
                "git", "-C", path,
                "push", git_repo.path, f"master:{ref}"],
                stderr=subprocess.STDOUT, stdout=subprocess.PIPE)
            if proc.returncode != 0:
                print("Error during git push: " + str(proc.stdout), file=sys.stderr)
                return
            db.session.commit()
            commit = repo.get(repo.head.target)
            return {
                "id": git_repo.id,
                "new": new,
                "name": repo_name,
                "owner": user.username,
                "ref": ref,
                "commit_sha": str(commit.oid),
                "commit_author": commit.author.name,
                "commit_email": commit.author.email,
                "commit_time": commit_time(commit).strftime(DATE_FORMAT),
                "commit_message": commit.message,
                "tree_sha": str(commit.tree_id),
            }
        else:
            db.session.commit()
            return {
                "id": git_repo.id,
                "new": new,
                "name": repo_name,
                "owner": user.username,
                "ref": ref,
                "commit_sha": None,
                "commit_author": None,
                "commit_email": None,
                "commit_time": None,
                "commit_message": None,
                "tree_sha": None,
            }

manifests = []
root = migrate_repo(os.path.join(man_repos, "root"), admin, root_wiki, is_root=True)

for user in os.scandir(man_repos):
    if not user.is_dir() or not user.name.startswith("~"):
        continue
    for repo in os.scandir(os.path.join(man_repos, user)):
        manifests.append(migrate_repo(
            os.path.join(man_repos, user, repo.name), user.name[1:], repo.name))

print(json.dumps({
    "root": root,
    "wikis": manifests,
}))
